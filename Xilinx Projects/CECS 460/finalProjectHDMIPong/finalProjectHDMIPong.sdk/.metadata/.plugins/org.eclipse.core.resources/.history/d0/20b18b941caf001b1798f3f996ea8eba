/**
 * Example of using the Digilent display drivers for Zybo Z7 HDMI output, with animation
 * Russell Joyce, 11/03/2019
 */

#include <stdio.h>
#include "xil_types.h"
#include "xil_cache.h"
#include "xparameters.h"
#include "display_ctrl.h"
#include "xgpio.h"
#include "xadcps.h"

// Frame size (based on 1440x900 resolution, 32 bits per pixel)
#define MAX_FRAME (1920*1080)
#define FRAME_STRIDE (1920*4)

DisplayCtrl dispCtrl; // Display driver struct
u32 frameBuf[DISPLAY_NUM_FRAMES][MAX_FRAME] __attribute__((aligned(0x20))); // Frame buffers for video data
void *pFrames[DISPLAY_NUM_FRAMES]; // Array of pointers to the frame buffers

// GPIO structs
XGpio dip, push;
int psb_check, dip_check; // variable used to store data from gpio

#define XADC_DEVICE_ID 		XPAR_XADCPS_0_DEVICE_ID
XAdcPs XAdcInst;
#define XAdcPs_RawToVoltage(AdcData) 					\
	((((float)(AdcData))* (1.0f))/65536.0f)


// parameters to control the ball
int ballx, bally; // variables to store current ball position
int ballxstart = 928;
int ballystart = 500;
int ballwidth = 64;
int ballheight = 64;
int ballvel = 5;

// variable to set the paddle size and movement
int paddlewidth = 42;
int paddleheight = 288;
int paddlemove = 30;

// parameters to control the player 1 paddle
int paddle1x, paddle1y; // variables to store current player 1 paddle position
int paddle1xstart = 20;
int paddle1ystart = 400;

// parameters to control the player 2 paddle
int paddle2x, paddle2y; // variables to store current player 2 paddle position
int paddle2xstart = 1856;
int paddle2ystart = 400;

int XAdcFractionToInt(float floatnum)
{
	float temp;
	temp = floatnum;
	if (floatnum < 0) {
		temp = -(floatnum);
	}
	return( ((int)((temp -(float)((int)temp)) * (1000.0f))));
}


int main(void) {
	// Initialize an array of pointers to the 2 frame buffers
	int i;
	u32 XAdcRawData;
	float XAdcVolData;
	int xStatus , Y1voltage, Y2voltage;
	XAdcPs_Config *XAdcPsConfigPtr;
	XAdcPs *XAdcInstPtr = &XAdcInst;

	u32 red, green, blue;
	for (i = 0; i < DISPLAY_NUM_FRAMES; i++)
		pFrames[i] = frameBuf[i];

	XGpio_Initialize(&dip, XPAR_SWITCHES_DEVICE_ID);
    XGpio_SetDataDirection(&dip, 1, 0xffffffff);

    XGpio_Initialize(&push, XPAR_BUTTONS_DEVICE_ID);
    XGpio_SetDataDirection(&push, 1, 0xffffffff);

    XAdcPsConfigPtr = XAdcPs_LookupConfig(XADC_DEVICE_ID);
	if (XAdcPsConfigPtr == NULL) {
		return XST_FAILURE;
	}

    XAdcPs_CfgInitialize(XAdcInstPtr, XAdcPsConfigPtr, XAdcPsConfigPtr->BaseAddress);
    xStatus = XAdcPs_SelfTest(XAdcInstPtr);
	if (xStatus != XST_SUCCESS) {
		return XST_FAILURE;
	}

	// Initialize the display controller
	DisplayInitialize(&dispCtrl, XPAR_AXIVDMA_0_DEVICE_ID, XPAR_VTC_0_DEVICE_ID, XPAR_HDMI_AXI_DYNCLK_0_BASEADDR, pFrames, FRAME_STRIDE);

	// Start with the first frame buffer (of two)
	DisplayChangeFrame(&dispCtrl, 0);

	// Set the display resolution
	DisplaySetMode(&dispCtrl, &VMODE_1920x1080);

	// Enable video output
	DisplayStart(&dispCtrl);

	printf("\n\r");
	printf("HDMI output enabled\n\r");
	printf("Current Resolution: %s\n\r", dispCtrl.vMode.label);
	printf("Pixel Clock Frequency: %.3fMHz\n\r", dispCtrl.pxlFreq);
	printf("Starting animation loop...\n\r");

	// Get parameters from display controller struct
	u32 stride = dispCtrl.stride / 4;
	u32 width = dispCtrl.vMode.width;
	u32 height = dispCtrl.vMode.height;

	u32 *frame;
	int right = 1;
	int down = 1;
	u32 buff = dispCtrl.curFrame;
	while (1) {
		XAdcRawData = XAdcPs_GetAdcData(XAdcInstPtr,XADCPS_CH_AUX_MIN+7); // Get ADC data from AD7 (Pair JA2-JA8)
		XAdcVolData = XAdcPs_RawToVoltage(XAdcRawData);
		Y1voltage = XAdcFractionToInt(XAdcVolData);
		printf("P1 Y axis is %d mV.   \r\n", Y1voltage);

		XAdcRawData = XAdcPs_GetAdcData(XAdcInstPtr,XADCPS_CH_AUX_MIN+6); // Get ADC data from AD7 (Pair JA2-JA8)
		XAdcVolData = XAdcPs_RawToVoltage(XAdcRawData);
		Y2voltage = XAdcFractionToInt(XAdcVolData);
		printf("P2 Y axis is %d mV.   \r\n", Y2voltage);

		// check the dip switch input
		dip_check = XGpio_DiscreteRead(&dip, 1);

		// dip switches control the color of the ball and paddle
		if (dip_check == 0x1)
		{
			red = 0;
			green = 0;
			blue = 255;
		}
		else if (dip_check == 0x2)
		{
			red = 0;
			green = 255;
			blue = 0;
		}
		else if (dip_check == 0x3)
		{
			red = 255;
			green = 255;
			blue = 0;
		}
		else if (dip_check == 0x4)
		{
			red = 255;
			green = 0;
			blue = 0;
		}
		else if (dip_check == 0x5)
		{
			red = 255;
			green = 0;
			blue = 255;
		}
		else if (dip_check == 0x6)
		{
			red = 0;
			green = 255;
			blue = 255;
		}
		else if (dip_check == 0x7)
		{
			red = 255;
			green = 255;
			blue = 255;
		}
		else if (dip_check == 0x8)
		{
			red = 255;
			green = 155;
			blue = 15;
		}
		else
		{
			red = 0;
			green = 0;
			blue = 0;
		}

		// Check the push button input
		psb_check = XGpio_DiscreteRead(&push, 1);
		// push buttons control the movement of the paddles
		if (((psb_check == 0x8) || (Y1voltage < 300)) && ((paddle1ystart - paddlemove) > 1))
		{
			paddle1ystart-=paddlemove;
		}
		else if (((psb_check == 0x4) || (Y1voltage > 360)) && (((paddle1ystart + paddleheight) + paddlemove) < (height+1)))
		{
			paddle1ystart+=paddlemove;
		}
		if (((psb_check == 0x2)|| (Y2voltage < 300)) && ((paddle2ystart - paddlemove) > 1))
		{
			paddle2ystart-=paddlemove;
		}
		else if (((psb_check == 0x1) || (Y2voltage > 360)) && (((paddle2ystart + paddleheight) + paddlemove) < (height+1)))
		{
			paddle2ystart+=paddlemove;
		}

		// Switch the frame we're modifying to be the back buffer (1 to 0, or 0 to 1)
		buff = !buff;
		frame = (u32 *)dispCtrl.framePtr[buff];

		// Clear the entire frame to white (inefficient, but it works)
		memset(frame, 0xFF, MAX_FRAME*4);

		// Adjust the position of the ball
		if (right) {
			ballxstart+=ballvel;
			if (ballxstart > width-64){
				ballxstart = 928;
				ballystart = 500;
				ballvel = 5;
			}
		}
		else {
			ballxstart-=ballvel;
			if (ballxstart < 0){
				ballxstart = 928;
				ballystart = 500;
				ballvel = 5;
			}
		}

		if (down) {
			ballystart+=ballvel;
			if (ballystart > height-64) {
				down = 0;
			}
		}
		else {
			ballystart-=ballvel;
			if (ballystart < 0) {
				down = 1;
			}
		}

		if ((ballxstart < (paddle1xstart + paddlewidth)) && ((ballystart < (paddle1ystart + paddleheight)) && ((ballystart + ballheight) > paddle1ystart))){
			ballxstart+=ballvel;
			if (ballvel < 12){
				ballvel++;
			}
			right = 1;
		}
		else if (((ballxstart + ballwidth) > paddle2xstart) && ((ballystart < (paddle2ystart + paddleheight)) && ((ballystart + ballheight) > paddle2ystart))){
			ballxstart-=ballvel;
			if (ballvel < 12){
				ballvel++;
			}
			right = 0;
		}

		for (ballx = ballxstart; ballx < ballxstart+ballwidth; ballx++) {
			for (bally = ballystart; bally < ballystart+ballheight; bally++) {
				frame[bally*stride + ballx] = (red << BIT_DISPLAY_RED) | (green << BIT_DISPLAY_GREEN) | (blue << BIT_DISPLAY_BLUE);
			}
		}

		// displaying the player 1 paddle based on the defined ball parameters
		for (paddle1x = paddle1xstart; paddle1x < ((paddle1xstart+paddlewidth)); paddle1x++) {
			for (paddle1y = paddle1ystart; paddle1y < paddle1ystart+paddleheight; paddle1y++) {
				frame[(paddle1y*stride) + paddle1x] = (red << BIT_DISPLAY_RED) | (green << BIT_DISPLAY_GREEN) | (blue << BIT_DISPLAY_BLUE);
			}
		}

		// displaying the player 2 paddle based on the defined ball parameters
		for (paddle2x = paddle2xstart; paddle2x < ((paddle2xstart+paddlewidth)); paddle2x++) {
			for (paddle2y = paddle2ystart; paddle2y < paddle2ystart+paddleheight; paddle2y++) {
				frame[paddle2y*stride + paddle2x] = (red << BIT_DISPLAY_RED) | (green << BIT_DISPLAY_GREEN) | (blue << BIT_DISPLAY_BLUE);
			}
		}

		// Flush everything out to DDR from the cache
		Xil_DCacheFlush();

		// Switch active frame to the back buffer (will take place during next vertical blanking period)
		DisplayChangeFrame(&dispCtrl, buff);

		// Wait for the frame to switch before continuing (so after current frame has been drawn)
		DisplayWaitForSync(&dispCtrl);

	}

	return 0;
}
